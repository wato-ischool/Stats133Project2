data$posY = as.numeric(levels(data$posY))[data$posY]
data$posZ = as.numeric(levels(data$posZ))[data$posZ]
data$orientation = as.numeric(levels(data$orientation))[data$orientation]
data$signal = as.numeric(levels(data$signal))[data$signal]
# Drop any irrelevant variables, i.e., variables that have the same values for all records or
# where the same information is captured in another variable.
# 1. Drop scanMac because length(offline$scanMac[as.character.factor(offline$scanMac) != "00:02:2D:21:0F:33"]) returns 0.
#    Also, > unique(offline$scanMac)
#         [1] 00:02:2D:21:0F:33
# 2. Drop "posZ" because nrow(offline[offline$posZ != 0.0, ]) returns 0.
#    Also, > unique(offline$posZ)
#         [1] 0.0
# 3. Drop "channel" because "channel" can be determined from the MAC address
# 4. Drop "type" which can be computed from "mac" (the mac's type is 3 for access point and 1 for device in adhoc mode = 1)
# drop columns method from http://stackoverflow.com/questions/4605206/drop-columns-r-data-frame/21719511#21719511
data[ , c("scanMac", "posZ", "channel", "type")] = list(NULL)
# Round the values for orientation to the nearest 45 degrees, but keep the original values too.
data$roundedOrientation = round(data$orientation / 45.0, digits = 0) * 45
# The spec says that "Signal strengths were recorded at 8 orientations in 45 degree increments (i.e., 0, 45, 90, and so on)."
# The eight orientations are: 0, 45, 90, 135, 180, 225, 270, 335.
# Therefore, set all orientations that are 360 to 0.
data$roundedOrientation[data$roundedOrientation == 360] = 0
# get rid of the extraneous row names at the beginning of the data frame
row.names(data) = NULL
return(data)
}
combineSignals = function(data) {
# make an index for every sixth row starting at 1, 2, 3, 4, 5, and 6
start1By6 = seq(1, nrow(data), by = 6)
start2By6 = seq(2, nrow(data), by = 6)
start3By6 = seq(3, nrow(data), by = 6)
start4By6 = seq(4, nrow(data), by = 6)
start5By6 = seq(5, nrow(data), by = 6)
start6By6 = seq(6, nrow(data), by = 6)
# remove everything with
relevantIndices = floor(nrow(data) / 6) * 6
data = data[relevantIndices, ]
# keep only every sixth row
newdf = data[start1By6, ]
newdf$S1 = data[start1By6, ]$signal
newdf$S2 = data[start2By6, ]$signal
newdf$S3 = data[start3By6, ]$signal
newdf$S4 = data[start4By6, ]$signal
newdf$S5 = data[start5By6, ]$signal
newdf$S6 = data[start6By6, ]$signal
return(newdf)
}
tmp = lapply(txt2, processLine)
online = as.data.frame(do.call("rbind", tmp))
names(online) = c("time", "scanMac", "posX", "posY", "posZ",
"orientation", "mac", "signal", "channel", "type")
online2 = cleanData(online)
row.names(online2) = NULL
online3 = combineSignals(online2)
head(online2)
length(is.na(online$mac))
is.na(online$mac)
is.na(online$mac)
online[is.na(online), ]
online2[is.na(online2), ]
tmp = lapply(txt2, processLine)
online = as.data.frame(do.call("rbind", tmp))
names(online) = c("time", "scanMac", "posX", "posY", "posZ",
"orientation", "mac", "signal", "channel", "type")
online2 = cleanData(online)
row.names(online2) = NULL
online2[is.na(online2$mac), ]
head(online2)
online2[is.na(online2$signal), ]
online2[is.na(online2$orientation), ]
online2[is.na(online2$time), ]
online2[is.na(online2$posX), ]
online2[is.na(online2$posY), ]
online2[is.na(online2$posZ), ]
online3 = combineSignals(online2)
data = online2
start1By6 = seq(1, nrow(data), by = 6)
start2By6 = seq(2, nrow(data), by = 6)
start3By6 = seq(3, nrow(data), by = 6)
start4By6 = seq(4, nrow(data), by = 6)
start5By6 = seq(5, nrow(data), by = 6)
start6By6 = seq(6, nrow(data), by = 6)
relevantIndices = floor(nrow(data) / 6) * 6
data = data[relevantIndices, ]
newdf = data[start1By6, ]
newdf$S1 = data[start1By6, ]$signal
newdf$S2 = data[start2By6, ]$signal
newdf$S3 = data[start3By6, ]$signal
newdf$S4 = data[start4By6, ]$signal
newdf$S5 = data[start5By6, ]$signal
floor(nrow(data) / 6) * 6
head(data)
data
data
online2
data = online2
data
start1By6 = seq(1, nrow(data), by = 6)
start2By6 = seq(2, nrow(data), by = 6)
start3By6 = seq(3, nrow(data), by = 6)
start4By6 = seq(4, nrow(data), by = 6)
start5By6 = seq(5, nrow(data), by = 6)
start6By6 = seq(6, nrow(data), by = 6)
# remove everything with
relevantIndices = floor(nrow(data) / 6) * 6
data = data[relevantIndices, ]
# keep only every sixth row
newdf = data[start1By6, ]
newdf$S1 = data[start1By6, ]$signal
newdf$S2 = data[start2By6, ]$signal
newdf$S3 = data[start3By6, ]$signal
data
data = online2
nrow(data)
nrow(data) / 6
floor(nrow(data) / 6) * 6
1:15
relevantIndices = floor(nrow(data) / 6) * 6
data = data[1:relevantIndices, ]
# keep only every sixth row
newdf = data[start1By6, ]
newdf$S1 = data[start1By6, ]$signal
newdf$S2 = data[start2By6, ]$signal
newdf$S3 = data[start3By6, ]$signal
newdf$S4 = data[start4By6, ]$signal
newdf$S5 = data[start5By6, ]$signal
newdf$S6 = data[start6By6, ]$signal
return(newdf)
data
nrow(data)
nrow(data)/6
data = online2
start1By6 = seq(1, nrow(data), by = 6)
start2By6 = seq(2, nrow(data), by = 6)
start3By6 = seq(3, nrow(data), by = 6)
start4By6 = seq(4, nrow(data), by = 6)
start5By6 = seq(5, nrow(data), by = 6)
start6By6 = seq(6, nrow(data), by = 6)
# remove everything with
relevantIndices = floor(nrow(data) / 6) * 6
data = data[1:relevantIndices, ]
# remove everything that doesn't fit
relevantIndices = floor(nrow(data) / 6) * 6
data = data[1:relevantIndices, ]
# make an index for every sixth row starting at 1, 2, 3, 4, 5, and 6
start1By6 = seq(1, nrow(data), by = 6)
start2By6 = seq(2, nrow(data), by = 6)
start3By6 = seq(3, nrow(data), by = 6)
start4By6 = seq(4, nrow(data), by = 6)
start5By6 = seq(5, nrow(data), by = 6)
start6By6 = seq(6, nrow(data), by = 6)
# keep only every sixth row
newdf = data[start1By6, ]
newdf$S1 = data[start1By6, ]$signal
newdf$S2 = data[start2By6, ]$signal
newdf$S3 = data[start3By6, ]$signal
newdf$S4 = data[start4By6, ]$signal
newdf$S5 = data[start5By6, ]$signal
newdf$S6 = data[start6By6, ]$signal
combineSignals = function(data) {
# remove everything that doesn't fit
relevantIndices = floor(nrow(data) / 6) * 6
data = data[1:relevantIndices, ]
# make an index for every sixth row starting at 1, 2, 3, 4, 5, and 6
start1By6 = seq(1, nrow(data), by = 6)
start2By6 = seq(2, nrow(data), by = 6)
start3By6 = seq(3, nrow(data), by = 6)
start4By6 = seq(4, nrow(data), by = 6)
start5By6 = seq(5, nrow(data), by = 6)
start6By6 = seq(6, nrow(data), by = 6)
# keep only every sixth row
newdf = data[start1By6, ]
newdf$S1 = data[start1By6, ]$signal
newdf$S2 = data[start2By6, ]$signal
newdf$S3 = data[start3By6, ]$signal
newdf$S4 = data[start4By6, ]$signal
newdf$S5 = data[start5By6, ]$signal
newdf$S6 = data[start6By6, ]$signal
return(newdf)
}
tmp = lapply(txt2, processLine)
online = as.data.frame(do.call("rbind", tmp))
names(online) = c("time", "scanMac", "posX", "posY", "posZ",
"orientation", "mac", "signal", "channel", "type")
online2 = cleanData(online)
row.names(online2) = NULL
online3 = combineSignals(online2)
?order
order(c(1, 5, 12, 9, 3))
test1 = c(1, 2, 3)
test2 = c(4, 5, 6)
testdf = data.frame(test1, test2)
testdf
test = vapply(testdf, function(x) print(x))
test = vapply(testdf, FUN = function(x) print(x))
?vapply
test = lapply(testdf, FUN = function(x) print(x))
test = lapply(testdf, FUN = function(x) print(x$test1))
test = lapply(testdf, FUN = function(x) print(x[1]))
test = lapply(testdf, FUN = function(x, i) print(x[i]))
test = lapply(testdf, FUN = function(x, i) print(x[i][1]))
test = lapply(testdf, FUN = function(x, i) print(x[i][2]))
test
testdf
test = lapply(testdf, FUN = function(x) print(x)
)
test
test = sapply(testdf, FUN = function(x) print(x))
test = sapply(testdf, FUN = function(x) print(x$test1))
test = sapply(testdf, FUN = function(x) print(x["test1"]))
testdf
testdf2 = data.frame(test1, test2)
(testdf$test1 - testdf2$test1)^2
sqrt
sqrt(55)
structureData = function(txt) {
tmp = lapply(txt, processLine)
offline = as.data.frame(do.call("rbind", tmp))
names(offline) = c("time", "scanMac", "posX", "posY", "posZ",
"orientation", "mac", "signal", "channel", "type")
offline2 = cleanData(offline)
row.names(offline2) = NULL
offline3 = combineSignals(offline2)
}
offline = structureData(txt)
online = structureData(txt2)
findNearestNeighbor(online[1, ], offline, 5)
findNearestNeighbor = function(incomingSignal, trainingData, k) {
distances = sqrt((incomingSignal$S1 - trainingData$S1)^2 + (incomingSignal$S2 - trainingData$S2)^2
+ (incomingSignal$S3 - trainingData$S3)^2 + (incomingSignal$S4 - trainingData$S4)^2
+ (incomingSignal$S5 - trainingData$S5)^2 + (incomingSignal$S6 - trainingData$S6)^2)
orderedDistances = order(distances)
return(trainingData[orderedDistances[1:k], ])
}
findNearestNeighbor(online[1, ], offline, 5)
findNearestNeighbor = function(incomingSignal, trainingData, k) {
distances = sqrt((incomingSignal$S1 - trainingData$S1)^2 + (incomingSignal$S2 - trainingData$S2)^2
+ (incomingSignal$S3 - trainingData$S3)^2 + (incomingSignal$S4 - trainingData$S4)^2
+ (incomingSignal$S5 - trainingData$S5)^2 + (incomingSignal$S6 - trainingData$S6)^2)
orderedDistances = order(distances)
return(trainingData[orderedDistances[1:k], c(posX, posY)])
}
findNearestNeighbor(online[1, ], offline, 5)
findNearestNeighbor = function(incomingSignal, trainingData, k) {
distances = sqrt((incomingSignal$S1 - trainingData$S1)^2 + (incomingSignal$S2 - trainingData$S2)^2
+ (incomingSignal$S3 - trainingData$S3)^2 + (incomingSignal$S4 - trainingData$S4)^2
+ (incomingSignal$S5 - trainingData$S5)^2 + (incomingSignal$S6 - trainingData$S6)^2)
orderedDistances = order(distances)
return(trainingData[orderedDistances[1:k], c("posX", "posY")])
}
findNearestNeighbor(online[1, ], offline, 5)
predXY = function(orderedData) {
x = average(orderedData$posX)
y = average(orderedData$posY)
return(data.frame(x, y))
}
findNearestNeighbor(online[1, ], offline, 5)
predXY(findNearestNeighbor(online[1, ], offline, 5))
predXY = function(orderedData) {
x = avg(orderedData$posX)
y = avg(orderedData$posY)
return(data.frame(x, y))
}
# TODO test
predXY(findNearestNeighbor(online[1, ], offline, 5))
?mean
predXY = function(orderedData) {
x = mean(orderedData$posX)
y = mean(orderedData$posY)
return(data.frame(x, y))
}
predXY(findNearestNeighbor(online[1, ], offline, 5))
lapply(predXY(findNearestNeighbor(online, offline, 5)))
predXY(findNearestNeighbor(online, offline, 5))
findNearestNeighborAndPredXY = function(incomingSignal, trainingData, k) {
distances = sqrt((incomingSignal$S1 - trainingData$S1)^2 + (incomingSignal$S2 - trainingData$S2)^2
+ (incomingSignal$S3 - trainingData$S3)^2 + (incomingSignal$S4 - trainingData$S4)^2
+ (incomingSignal$S5 - trainingData$S5)^2 + (incomingSignal$S6 - trainingData$S6)^2)
orderedDistances = order(distances)
orderedData = trainingData[orderedDistances[1:k], c("posX", "posY")]
x = mean(orderedData$posX)
y = mean(orderedData$posY)
return(data.frame(x, y))
}
predXY(findNearestNeighbor(online[1, ], offline, 5))
sapply(online, FUN = function(x) { return(findNearestNeighborAndPredXY(x, offline, 5)) })
sapply(online, FUN = function(x) { print(x) })
sapply(online, FUN = function(x) { print(x$S1) })
sapply(online, FUN = function(x) { print(x["S1"]) })
sapply(online, FUN = function(x) { print(x["time"]) })
apply(online, 1, FUN = function(x) { return(findNearestNeighborAndPredXY(x, offline, 5)) })
?apply
apply(online, 1, offline, 5, FUN = findNearestNeighborAndPredXY)
apply(online, 1, trainingData = offline, k = 5, FUN = findNearestNeighborAndPredXY)
findNearestNeighborAndPredXY = function(incomingSignal, trainingData, k) {
distances = sqrt((incomingSignal$S1 - trainingData$S1)^2 + (incomingSignal$S2 - trainingData$S2)^2
+ (incomingSignal$S3 - trainingData$S3)^2 + (incomingSignal$S4 - trainingData$S4)^2
+ (incomingSignal$S5 - trainingData$S5)^2 + (incomingSignal$S6 - trainingData$S6)^2)
orderedDistances = order(distances)
orderedData = trainingData[orderedDistances[1:k], c("posX", "posY")]
x = mean(orderedData$posX)
y = mean(orderedData$posY)
return(data.frame(x, y))
}
apply(online, 1, trainingData = offline, k = 5, FUN = findNearestNeighborAndPredXY)
findNearestNeighborAndPredXY = function(incomingSignal, trainingData, k) {
print(incomingSignal)
distances = sqrt((incomingSignal$S1 - trainingData$S1)^2 + (incomingSignal$S2 - trainingData$S2)^2
+ (incomingSignal$S3 - trainingData$S3)^2 + (incomingSignal$S4 - trainingData$S4)^2
+ (incomingSignal$S5 - trainingData$S5)^2 + (incomingSignal$S6 - trainingData$S6)^2)
orderedDistances = order(distances)
orderedData = trainingData[orderedDistances[1:k], c("posX", "posY")]
x = mean(orderedData$posX)
y = mean(orderedData$posY)
return(data.frame(x, y))
}
# TODO test
predXY(findNearestNeighbor(online[1, ], offline, 5))
apply(online, 1, trainingData = offline, k = 5, FUN = findNearestNeighborAndPredXY)
function(incomingSignal, trainingData, k) {
findNearestNeighborAndPredXY = function(incomingSignal, trainingData, k) {
print(incomingSignal)
print(class(incomingSignal))
distances = sqrt((incomingSignal$S1 - trainingData$S1)^2 + (incomingSignal$S2 - trainingData$S2)^2
+ (incomingSignal$S3 - trainingData$S3)^2 + (incomingSignal$S4 - trainingData$S4)^2
+ (incomingSignal$S5 - trainingData$S5)^2 + (incomingSignal$S6 - trainingData$S6)^2)
orderedDistances = order(distances)
orderedData = trainingData[orderedDistances[1:k], c("posX", "posY")]
x = mean(orderedData$posX)
y = mean(orderedData$posY)
return(data.frame(x, y))
}
apply(online, 1, trainingData = offline, k = 5, FUN = findNearestNeighborAndPredXY)
)
findNearestNeighborAndPredXY = function(incomingSignal, trainingData, k) {
print(incomingSignal)
print(class(incomingSignal))
distances = sqrt((incomingSignal$S1 - trainingData$S1)^2 + (incomingSignal$S2 - trainingData$S2)^2
+ (incomingSignal$S3 - trainingData$S3)^2 + (incomingSignal$S4 - trainingData$S4)^2
+ (incomingSignal$S5 - trainingData$S5)^2 + (incomingSignal$S6 - trainingData$S6)^2)
orderedDistances = order(distances)
orderedData = trainingData[orderedDistances[1:k], c("posX", "posY")]
x = mean(orderedData$posX)
y = mean(orderedData$posY)
return(data.frame(x, y))
}
apply(online, 1, trainingData = offline, k = 5, FUN = findNearestNeighborAndPredXY)
findNearestNeighborAndPredXY = function(incomingSignal, trainingData, k) {
print(incomingSignal)
print(class(incomingSignal))
distances = sqrt((incomingSignal["S1"] - trainingData$S1)^2 + (incomingSignal$S2 - trainingData$S2)^2
+ (incomingSignal$S3 - trainingData$S3)^2 + (incomingSignal$S4 - trainingData$S4)^2
+ (incomingSignal$S5 - trainingData$S5)^2 + (incomingSignal$S6 - trainingData$S6)^2)
orderedDistances = order(distances)
orderedData = trainingData[orderedDistances[1:k], c("posX", "posY")]
x = mean(orderedData$posX)
y = mean(orderedData$posY)
return(data.frame(x, y))
}
apply(online, 1, trainingData = offline, k = 5, FUN = findNearestNeighborAndPredXY)
head(online)
apply(online, 1, trainingData = offline, k = 5, FUN = findNearestNeighborAndPredXY)
findNearestNeighborAndPredXY = function(incomingSignal, trainingData, k) {
print(incomingSignal)
print(class(incomingSignal))
distances = sqrt((incomingSignal$S1 - trainingData$S1)^2 + (incomingSignal$S2 - trainingData$S2)^2
+ (incomingSignal$S3 - trainingData$S3)^2 + (incomingSignal$S4 - trainingData$S4)^2
+ (incomingSignal$S5 - trainingData$S5)^2 + (incomingSignal$S6 - trainingData$S6)^2)
orderedDistances = order(distances)
orderedData = trainingData[orderedDistances[1:k], c("posX", "posY")]
x = mean(orderedData$posX)
y = mean(orderedData$posY)
return(data.frame(x, y))
}
apply(online, 1, trainingData = offline, k = 5, FUN = findNearestNeighborAndPredXY)
by(online, 1:nrow(online), function(row) findNearestNeighborAndPredXY(row, offline, 5))
findNearestNeighborAndPredXY = function(incomingSignal, trainingData, k) {
distances = sqrt((incomingSignal$S1 - trainingData$S1)^2 + (incomingSignal$S2 - trainingData$S2)^2
+ (incomingSignal$S3 - trainingData$S3)^2 + (incomingSignal$S4 - trainingData$S4)^2
+ (incomingSignal$S5 - trainingData$S5)^2 + (incomingSignal$S6 - trainingData$S6)^2)
orderedDistances = order(distances)
orderedData = trainingData[orderedDistances[1:k], c("posX", "posY")]
x = mean(orderedData$posX)
y = mean(orderedData$posY)
return(data.frame(x, y))
}
test = by(online, 1:nrow(online), function(row) findNearestNeighborAndPredXY(row, offline, 5))
head(test)
test[[1]]
test[[2]]
class(test)
?by
x = c(1, 2, 3, 4, 5)
y = c(11, 12, 13, 14, 15)
df = data.frame(x, y)
df
by(df, seq_len(nrow(df)), function(row) mean(row$x, row$y)
)
by(df, seq_len(nrow(df)), function(row) mean(row$x, row$y))
by(df, seq_len(nrow(df)), function(row) mean(x))
df
meanXY = function(xy) {
x = mean(xy$x)
y = mean(xy$y)
return(data.frame(x, y))
)}
meanXY = function(xy) {
x = mean(xy$x)
y = mean(xy$y)
return(data.frame(x, y))
}
by(df, seq_len(nrow(df)), function(row) meanXY(row))
by(df, seq_len(nrow(df)), function(row) return(meanXY(row))
)
by(df, seq_len(nrow(df)), function(row) meanXY(row))
meanXY
meanXY = function(xy, otherNumbers) {
x = mean(xy$x, otherNumbers)
y = mean(xy$y, otherNumbers)
return(data.frame(x, y))
}
otherNumbers = c(21, 22, 23, 24)
by(df, seq_len(nrow(df)), function(row) meanXY(row, otherNumbers))
mean(1, c(1, 2))
mean(1, trim(c(1, 2)))
?unnest
meanXY = function(xy, z) {
x = mean(xy$x, z)
y = mean(xy$y, z)
return(data.frame(x, y))
}
by(df, seq_len(nrow(df)), function(row) meanXY(row, 5))
meanXY(data.frame(c(1, 2, 3), c(11, 12, 13)), 5)
meanXY
meanXY(data.frame(x = c(1, 2, 3), y = c(11, 12, 13)), 5)
mean(1, 2, 3, 5)
?mean
11 / 4
mean(c(1, 2, 3, 5))
meanXY = function(xy, z) {
x = mean(c(xy$x, z))
y = mean(c(xy$y, z))
return(data.frame(x, y))
}
meanXY(data.frame(x = c(1, 2, 3), y = c(11, 12, 13)), 5)
by(df, seq_len(nrow(df)), function(row) meanXY(row, 5))
df
class(by(df, seq_len(nrow(df)), function(row) meanXY(row, 5)))
data.frame(x = c(3, 3.5, 4, 4.5, 5), y = c(8, 8.5, 9, 9.5, 10))
testby by(df, seq_len(nrow(df)), function(row) meanXY(row, 5))
testby = by(df, seq_len(nrow(df)), function(row) meanXY(row, 5))
testby
do.call(rbind, testby)
class(do.call(rbind, testby))
test = do.call(by(online, seq_len(nrow(online)), function(row) findNearestNeighborAndPredXY(row, offline, 5)))
test = by(online, seq_len(nrow(online)), function(row) findNearestNeighborAndPredXY(row, offline, 5))
head(test)
test = do.call(rbind, test)
head(test)
predictions = test
sqrt
calculateErrors(actual, predicted) {
return(sqrt((actual$posX - predicted$x)^2 + (actual$posY - predicted$y)))
}
calculateErrors(actual, predicted) {
return(sqrt((actual$posX - predicted$x)^2 + (actual$posY - predicted$y)^2))
}
calculateErrors(actual, predicted) {
return(sqrt((actual$posX - predicted$x)^2 + (actual$posY - predicted$y)^2))
}
calculateErrors = function(actual, predicted) {
return(sqrt((actual$posX - predicted$x)^2 + (actual$posY - predicted$y)^2))
}
calculateErrors(online, predictions)
totalErrors = calculateErrors(online, predictions)
averageError = mean(totalErrors)
averageError
averageErrors = vector(length = k)
k = 20
averageErrors = vector(length = k)
for (i in 1:k) {
predictions = do.call(rbind, by(online, seq_len(nrow(online)), function(row) findNearestNeighborAndPredXY(row, offline, k)))
totalErrors = calculateErrors(online, predictions)
averageError = mean(totalErrors)
averageErrors[k] = averageError
}
k = 20
averageErrors = vector(length = k)
for (i in 1:k) {
predictions = do.call(rbind, by(online, seq_len(nrow(online)), function(row) findNearestNeighborAndPredXY(row, offline, i)))
totalErrors = calculateErrors(online, predictions)
averageError = mean(totalErrors)
averageErrors[i] = averageError
}
averageErrors
lowestErrorK = which.min(k)
minimumError = min(k)
lowestErrorK
minimumError
lowestErrorK = which.min(averageErrors)
minimumError = min(averageErrors)
lowestErrorK
minimumError
c("test1", rep("test"))
c("test1", rep("test", 2))
test = data.matrix(offline[c("posX", posY"), ])
)
)
}
}}}}}}}}}]]
;
;
